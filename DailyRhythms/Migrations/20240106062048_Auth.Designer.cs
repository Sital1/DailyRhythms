// <auto-generated />
using System;
using DailyRhythms.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DailyRhythms.Migrations
{
    [DbContext(typeof(DailyRhythmsContext))]
    [Migration("20240106062048_Auth")]
    partial class Auth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DailyRhythms.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5944),
                            Name = "Morning",
                            UpdatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5947)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5951),
                            Name = "Afternoon",
                            UpdatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5952)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5953),
                            Name = "Evening",
                            UpdatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5953)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5954),
                            Name = "Anytime",
                            UpdatedAt = new DateTime(2024, 1, 6, 6, 20, 47, 793, DateTimeKind.Utc).AddTicks(5955)
                        });
                });

            modelBuilder.Entity("DailyRhythms.Models.DailyLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DailyLogs");
                });

            modelBuilder.Entity("DailyRhythms.Models.DailyLogToDoItem", b =>
                {
                    b.Property<int>("DailyLogId")
                        .HasColumnType("int");

                    b.Property<int>("ToDoItemId")
                        .HasColumnType("int");

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.HasKey("DailyLogId", "ToDoItemId");

                    b.HasIndex("ToDoItemId");

                    b.ToTable("DailyLogToDoItems");
                });

            modelBuilder.Entity("DailyRhythms.Models.ToDoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("ToDoItems");
                });

            modelBuilder.Entity("DailyRhythms.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DailyRhythms.Models.DailyLog", b =>
                {
                    b.HasOne("DailyRhythms.Models.User", "User")
                        .WithMany("DailyLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyRhythms.Models.DailyLogToDoItem", b =>
                {
                    b.HasOne("DailyRhythms.Models.DailyLog", "DailyLog")
                        .WithMany("DailyLogToDoItems")
                        .HasForeignKey("DailyLogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DailyRhythms.Models.ToDoItem", "ToDoItem")
                        .WithMany("DailyLogToDoItems")
                        .HasForeignKey("ToDoItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DailyLog");

                    b.Navigation("ToDoItem");
                });

            modelBuilder.Entity("DailyRhythms.Models.ToDoItem", b =>
                {
                    b.HasOne("DailyRhythms.Models.Category", "Category")
                        .WithMany("ToDoItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DailyRhythms.Models.User", "User")
                        .WithMany("ToDoItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DailyRhythms.Models.Category", b =>
                {
                    b.Navigation("ToDoItems");
                });

            modelBuilder.Entity("DailyRhythms.Models.DailyLog", b =>
                {
                    b.Navigation("DailyLogToDoItems");
                });

            modelBuilder.Entity("DailyRhythms.Models.ToDoItem", b =>
                {
                    b.Navigation("DailyLogToDoItems");
                });

            modelBuilder.Entity("DailyRhythms.Models.User", b =>
                {
                    b.Navigation("DailyLogs");

                    b.Navigation("ToDoItems");
                });
#pragma warning restore 612, 618
        }
    }
}
